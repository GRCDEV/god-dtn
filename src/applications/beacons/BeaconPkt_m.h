//
// Generated file, do not edit! Created by opp_msgc 4.3 from applications/beacons/BeaconPkt.msg.
//

#ifndef _BEACONPKT_M_H_
#define _BEACONPKT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>applications/beacons/BeaconPkt.msg</tt> by opp_msgc.
 * <pre>
 * enum NodeType{
 *     Car = 0; 
 *     Sink = 1;
 * }
 * </pre>
 */
enum NodeType {
    Car = 0,
    Sink = 1
};

/**
 * Class generated from <tt>applications/beacons/BeaconPkt.msg</tt> by opp_msgc.
 * <pre>
 * packet BeaconPkt {
 *     uint32 msgId;
 *     uint64 srcId;
 *     uint32 serviceIp;
 *     int 	nodeType  @enum(NodeType);
 *     double lat;
 *     double lon;
 *     double speed;
 *     double bearing;
 * }
 * </pre>
 */
class BeaconPkt : public ::cPacket
{
  protected:
    uint32 msgId_var;
    uint64 srcId_var;
    uint32 serviceIp_var;
    int nodeType_var;
    double lat_var;
    double lon_var;
    double speed_var;
    double bearing_var;

  private:
    void copy(const BeaconPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BeaconPkt&);

  public:
    BeaconPkt(const char *name=NULL, int kind=0);
    BeaconPkt(const BeaconPkt& other);
    virtual ~BeaconPkt();
    BeaconPkt& operator=(const BeaconPkt& other);
    virtual BeaconPkt *dup() const {return new BeaconPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint32 getMsgId() const;
    virtual void setMsgId(uint32 msgId);
    virtual uint64 getSrcId() const;
    virtual void setSrcId(uint64 srcId);
    virtual uint32 getServiceIp() const;
    virtual void setServiceIp(uint32 serviceIp);
    virtual int getNodeType() const;
    virtual void setNodeType(int nodeType);
    virtual double getLat() const;
    virtual void setLat(double lat);
    virtual double getLon() const;
    virtual void setLon(double lon);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual double getBearing() const;
    virtual void setBearing(double bearing);
};

inline void doPacking(cCommBuffer *b, BeaconPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BeaconPkt& obj) {obj.parsimUnpack(b);}


#endif // _BEACONPKT_M_H_
