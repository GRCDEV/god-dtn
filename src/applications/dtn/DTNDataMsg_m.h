//
// Generated file, do not edit! Created by opp_msgc 4.3 from applications/dtn/DTNDataMsg.msg.
//

#ifndef _DTNDATAMSG_M_H_
#define _DTNDATAMSG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "DTNcommon.h"
// }}



/**
 * Class generated from <tt>applications/dtn/DTNDataMsg.msg</tt> by opp_msgc.
 * <pre>
 * packet DTNDataMsg{
 *  	uint64 srcId;
 *  	uint64 dstId;
 *  	uint32 msgId;
 *  	DTNFragment fragments[];
 * }
 * </pre>
 */
class DTNDataMsg : public ::cPacket
{
  protected:
    uint64 srcId_var;
    uint64 dstId_var;
    uint32 msgId_var;
    DTNFragment *fragments_var; // array ptr
    unsigned int fragments_arraysize;

  private:
    void copy(const DTNDataMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DTNDataMsg&);

  public:
    DTNDataMsg(const char *name=NULL, int kind=0);
    DTNDataMsg(const DTNDataMsg& other);
    virtual ~DTNDataMsg();
    DTNDataMsg& operator=(const DTNDataMsg& other);
    virtual DTNDataMsg *dup() const {return new DTNDataMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint64 getSrcId() const;
    virtual void setSrcId(uint64 srcId);
    virtual uint64 getDstId() const;
    virtual void setDstId(uint64 dstId);
    virtual uint32 getMsgId() const;
    virtual void setMsgId(uint32 msgId);
    virtual void setFragmentsArraySize(unsigned int size);
    virtual unsigned int getFragmentsArraySize() const;
    virtual DTNFragment& getFragments(unsigned int k);
    virtual const DTNFragment& getFragments(unsigned int k) const {return const_cast<DTNDataMsg*>(this)->getFragments(k);}
    virtual void setFragments(unsigned int k, const DTNFragment& fragments);
};

inline void doPacking(cCommBuffer *b, DTNDataMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DTNDataMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/dtn/DTNDataMsg.msg</tt> by opp_msgc.
 * <pre>
 * packet DTNDataAck{
 *     uint64 srcId;
 *  	uint64 dstId;
 *  	uint32 msgId;
 * }
 * </pre>
 */
class DTNDataAck : public ::cPacket
{
  protected:
    uint64 srcId_var;
    uint64 dstId_var;
    uint32 msgId_var;

  private:
    void copy(const DTNDataAck& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DTNDataAck&);

  public:
    DTNDataAck(const char *name=NULL, int kind=0);
    DTNDataAck(const DTNDataAck& other);
    virtual ~DTNDataAck();
    DTNDataAck& operator=(const DTNDataAck& other);
    virtual DTNDataAck *dup() const {return new DTNDataAck(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint64 getSrcId() const;
    virtual void setSrcId(uint64 srcId);
    virtual uint64 getDstId() const;
    virtual void setDstId(uint64 dstId);
    virtual uint32 getMsgId() const;
    virtual void setMsgId(uint32 msgId);
};

inline void doPacking(cCommBuffer *b, DTNDataAck& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DTNDataAck& obj) {obj.parsimUnpack(b);}


#endif // _DTNDATAMSG_M_H_
