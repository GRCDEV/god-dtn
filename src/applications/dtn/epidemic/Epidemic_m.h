//
// Generated file, do not edit! Created by opp_msgc 4.3 from applications/dtn/epidemic/Epidemic.msg.
//

#ifndef _EPIDEMIC_M_H_
#define _EPIDEMIC_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "DTNcommon.h"
// }}



/**
 * Enum generated from <tt>applications/dtn/epidemic/Epidemic.msg</tt> by opp_msgc.
 * <pre>
 * enum EpidemicType{
 *     PKT_OFFER = 2;
 *     PKT_REQUEST = 3;
 * }
 * </pre>
 */
enum EpidemicType {
    PKT_OFFER = 2,
    PKT_REQUEST = 3
};

/**
 * Class generated from <tt>applications/dtn/epidemic/Epidemic.msg</tt> by opp_msgc.
 * <pre>
 * packet EpidemicPkt{
 *     uint64 srcId;
 *     uint64 dstId;
 *     uint8 type;
 * }
 * </pre>
 */
class EpidemicPkt : public ::cPacket
{
  protected:
    uint64 srcId_var;
    uint64 dstId_var;
    uint8 type_var;

  private:
    void copy(const EpidemicPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EpidemicPkt&);

  public:
    EpidemicPkt(const char *name=NULL, int kind=0);
    EpidemicPkt(const EpidemicPkt& other);
    virtual ~EpidemicPkt();
    EpidemicPkt& operator=(const EpidemicPkt& other);
    virtual EpidemicPkt *dup() const {return new EpidemicPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint64 getSrcId() const;
    virtual void setSrcId(uint64 srcId);
    virtual uint64 getDstId() const;
    virtual void setDstId(uint64 dstId);
    virtual uint8 getType() const;
    virtual void setType(uint8 type);
};

inline void doPacking(cCommBuffer *b, EpidemicPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EpidemicPkt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/dtn/epidemic/Epidemic.msg</tt> by opp_msgc.
 * <pre>
 * packet EpidemicPktOffer extends EpidemicPkt {
 *     type = PKT_OFFER;
 *     DTNUnique offer[];
 * }
 * </pre>
 */
class EpidemicPktOffer : public ::EpidemicPkt
{
  protected:
    DTNUnique *offer_var; // array ptr
    unsigned int offer_arraysize;

  private:
    void copy(const EpidemicPktOffer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EpidemicPktOffer&);

  public:
    EpidemicPktOffer(const char *name=NULL, int kind=0);
    EpidemicPktOffer(const EpidemicPktOffer& other);
    virtual ~EpidemicPktOffer();
    EpidemicPktOffer& operator=(const EpidemicPktOffer& other);
    virtual EpidemicPktOffer *dup() const {return new EpidemicPktOffer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setOfferArraySize(unsigned int size);
    virtual unsigned int getOfferArraySize() const;
    virtual DTNUnique& getOffer(unsigned int k);
    virtual const DTNUnique& getOffer(unsigned int k) const {return const_cast<EpidemicPktOffer*>(this)->getOffer(k);}
    virtual void setOffer(unsigned int k, const DTNUnique& offer);
};

inline void doPacking(cCommBuffer *b, EpidemicPktOffer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EpidemicPktOffer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/dtn/epidemic/Epidemic.msg</tt> by opp_msgc.
 * <pre>
 * packet EpidemicPktAsk extends EpidemicPkt{
 *     type = PKT_REQUEST;
 *     DTNUnique ask[];
 * }
 * </pre>
 */
class EpidemicPktAsk : public ::EpidemicPkt
{
  protected:
    DTNUnique *ask_var; // array ptr
    unsigned int ask_arraysize;

  private:
    void copy(const EpidemicPktAsk& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EpidemicPktAsk&);

  public:
    EpidemicPktAsk(const char *name=NULL, int kind=0);
    EpidemicPktAsk(const EpidemicPktAsk& other);
    virtual ~EpidemicPktAsk();
    EpidemicPktAsk& operator=(const EpidemicPktAsk& other);
    virtual EpidemicPktAsk *dup() const {return new EpidemicPktAsk(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setAskArraySize(unsigned int size);
    virtual unsigned int getAskArraySize() const;
    virtual DTNUnique& getAsk(unsigned int k);
    virtual const DTNUnique& getAsk(unsigned int k) const {return const_cast<EpidemicPktAsk*>(this)->getAsk(k);}
    virtual void setAsk(unsigned int k, const DTNUnique& ask);
};

inline void doPacking(cCommBuffer *b, EpidemicPktAsk& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EpidemicPktAsk& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/dtn/epidemic/Epidemic.msg</tt> by opp_msgc.
 * <pre>
 * packet EpiInfo{
 *     simtime_t lastBufferUpdate;
 * }
 * </pre>
 */
class EpiInfo : public ::cPacket
{
  protected:
    simtime_t lastBufferUpdate_var;

  private:
    void copy(const EpiInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EpiInfo&);

  public:
    EpiInfo(const char *name=NULL, int kind=0);
    EpiInfo(const EpiInfo& other);
    virtual ~EpiInfo();
    EpiInfo& operator=(const EpiInfo& other);
    virtual EpiInfo *dup() const {return new EpiInfo(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual simtime_t getLastBufferUpdate() const;
    virtual void setLastBufferUpdate(simtime_t lastBufferUpdate);
};

inline void doPacking(cCommBuffer *b, EpiInfo& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EpiInfo& obj) {obj.parsimUnpack(b);}


#endif // _EPIDEMIC_M_H_
